version: '3.8'

services:
  # Main Application
  go-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-auth-api
    ports:
      - "8081:8081"
    environment:
      - GO_ENV=production
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=yourpassword
      - DB_DATABASE=auth_db
      - JWT_SECRET=your-production-secret-key-256-bits-long
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - ENABLE_TRACING=true
      - ENABLE_METRICS=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: go-auth-postgres
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - api-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: go-auth-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: go-auth-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - api-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: go-auth-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning
      - ./deployments/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - api-network
    depends_on:
      - prometheus

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: go-auth-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/badger
    networks:
      - api-network
    command:
      - "--memory.max-traces=50000"
      - "--log-level=info"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: go-auth-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - api-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: go-auth-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    networks:
      - api-network
    privileged: true
    devices:
      - /dev/kmsg

  # Load Testing Service
  k6:
    image: grafana/k6:latest
    container_name: go-auth-k6
    volumes:
      - ./tests/k6:/scripts
    networks:
      - api-network
    profiles:
      - load-test
    command: run /scripts/load-test.js

networks:
  api-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local